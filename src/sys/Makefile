# Główny skrypt budujący IdyllaOS

# Wersja systemu
V_MAJOR:=0
V_MINOR:=2
V_RELEASE:=dev

# Uciszamy nieco make
MAKEFLAGS+=--no-print-directory

.PHONY: modules

TOPDIR:=$(CURDIR)
DESTDIR ?= /

HOSTCC=gcc
HOSTCFLAGS=-Wall -O2 -fomit-frame-pointer -pipe -std=c99

BUILD:=$(shell $(HOSTCC) -dumpmachine)
BUILD_ARCH:=$(shell uname -m | sed -e s/i.86/i386/)
ARCH ?= $(shell echo $(IDYLLAOS_ARCH) | sed -e s/i.86/i386/)
ARCH ?= $(BUILD_ARCH)
SRCARCH:=$(ARCH)

# Dodatkowe dla x86
ifeq ($(ARCH),i386)
	SRCARCH:=x86
endif

ifeq ($(ARCH),x86_64)
	SRCARCH:=x86
endif

# Parsowanie konfiguracji kernela
KERNCONF ?= GENERIC
CONFIG:=config/$(ARCH)/$(KERNCONF)

CONFIG_CPU:=$(shell awk '$$1 == "cpu" { print $$2 }' $(CONFIG))
CONFIG_NAME:=$(shell awk '$$1 == "name" { print $$2 }' $(CONFIG))
CONFIG_MODULES:=$(shell awk '$$1 == "module" { print $$2 }' $(CONFIG))

# Wykrywanie Cross-kompilacji
TARGET:=$(CONFIG_CPU)-pc-idyllaos
CROSS_COMPILER=
ifneq ($(TARGET),$(HOST))
	CROSS_COMPILER:=$(TARGET)-
endif

AR:=$(CROSS_COMPILER)ar
AS:=$(CROSS_COMPILER)gcc
CC:=$(CROSS_COMPILER)gcc
CPP:=$(CROSS_COMPILER)cpp
NM:=$(CROSS_COMPILER)nm
LD:=$(CROSS_COMPILER)ld
STRIP:=$(CROSS_COMPILER)strip
AUTOCONF_H:=include/autoconf.h
KERNEL_INC:=-Iinclude -Iinclude/$(SRCARCH) -include $(AUTOCONF_H)
CFLAGS:=-O2 -pipe -fno-exceptions -fno-builtin -nostdinc -Wall -nostdlib -D__KERNEL__
ASFLAGS:=$(CFLAGS) -D__ASM__
LDFLAGS:=-nostdlib -nodefaultlibs

MOD_CFLAGS:=-D__MODULE__
MOD_ASFLAGS:=-D__MODULE__
MOD_LFDLAGS:=-r

# Wczytaj plik budowania dla danej architektury
include arch/$(SRCARCH)/Kbuild

ifdef MOD

# Jesli kompilujemy modul
include $(MOD)/Kbuild

MOD_OBJECTS:=$(MOD_SOURCES:.c=.o)
MOD_OBJECTS:=$(MOD_OBJECTS:.S=.o)
MOD_OBJECTS:=$(addprefix $(MOD)/,$(MOD_OBJECTS))

all: $(MOD)/$(TARGET)
	@true

clean:
	@echo " CLEAN   $(TARGET) $(MOD_OBJECTS)"
	@rm -f $(TARGET) $(MOD_OBJECTS)

install: all
	@mkdir -p $(DESTDIR)/boot
	@mkdir -p $(DESTDIR)/boot/idylla/modules
	@echo " INSTALL modules/$(TARGET)"
	@cp $(MOD)/$(TARGET) $(DESTDIR)/boot/idylla/modules/$(TARGET)

$(MOD)/$(TARGET): $(AUTOCONF_H) $(MOD_OBJECTS)
	@echo " LD [M]  $@"
	@$(LD) $(LDFLAGS) $(MOD_LFDLAGS) -o $(MOD)/$(TARGET) $(MOD_OBJECTS) \
	$(shell $(CC) -print-libgcc-file-name)


else
# Jezeli kompilujemy kernel

# Wczytaj pozostałe pliki
include $(shell find lib/ init/ kernel/ mm/ -name 'Kbuild' -type f)

LDSCRIPT:=arch/$(SRCARCH)/$(LDSCRIPT)
SOURCES:=$(addprefix arch/$(SRCARCH)/,$(ARCH_SOURCES)) $(KERNEL_SOURCES)
OBJECTS:=$(SOURCES:.c=.o)
OBJECTS:=$(OBJECTS:.S=.o)

all: kernel.sys modules
	@true

clean: kernel_clean modules_clean

install: kernel.sys
	@mkdir -p $(DESTDIR)/boot
	@mkdir -p $(DESTDIR)/boot/idylla
	@echo " INSTALL kernel.sys"
	@cp kernel.sys $(DESTDIR)/boot/idylla/kernel.sys

modules:
	@$(foreach MOD,$(CONFIG_MODULES), \
	 make MOD=modules/$(MOD) all; )
	@true

modules_install:
	@$(foreach MOD,$(CONFIG_MODULES), \
	make MOD=modules/$(MOD) install; )

modules_clean:
	@$(foreach MOD,$(CONFIG_MODULES), \
	 make MOD=modules/$(MOD) clean; )

$(LDSCRIPT): $(AUTOCONF_H) $(LDSCRIPT).in
	@echo " CPP     $@"
	@$(CPP) $(KERNEL_INC) -P -C -o  $(LDSCRIPT) $(LDSCRIPT).in

.kernel.rel: $(AUTOCONF_H) $(OBJECTS)
	@rm -f .version.o .version.c
	@echo " LD      $@"
	@$(LD) -r -o $@ $(OBJECTS)

kernel.sys: $(LDSCRIPT) .kernel.rel .symtab.o .version.o
	@echo " LD      $@"
	@$(LD) $(LDFLAGS) -T $(LDSCRIPT) -o $@ .symtab.o .version.o .kernel.rel \
	$(shell $(CC) -print-libgcc-file-name)

kernel_clean:
	@echo " CLEAN   kernel.sys $(AUTOCONF_H) .version.c .version.o $(LDSCRIPT)"
	@rm -f kernel.sys $(AUTOCONF_H) .version.c .version.o $(LDSCRIPT)
	@echo " CLEAN   $(OBJECTS)"
	@rm -f $(OBJECTS)
endif

dumpenv:
	@echo "DESTDIR=$(DESTDIR)"
	@echo "BUILD=$(BUILD)"
	@echo "BUILD_ARCH=$(BUILD_ARCH)"
	@echo "ARCH=$(ARCH)"
	@echo "SRCARCH=$(ARCH)"
	@echo "KERNCONF=$(KERNCONF)"
	@echo "CONFIG=$(CONFIG)"
	@echo "CONFIG_CPU=$(CONFIG_CPU)"
	@echo "CONFIG_NAME=$(CONFIG_NAME)"
	@echo "TARGET=$(TARGET)"
	@echo "KERNEL_INC=$(KERNEL_INC)"
	@echo "SOURCES=$(SOURCES)"
	@echo "MODULES=$(CONFIG_MODULES)"
	@echo "MOD=$(MOD)"

$(AUTOCONF_H): $(CONFIG)
	@echo " GEN     $(AUTOCONF_H)"
	@rm -f $(AUTOCONF_H)
	@echo "/* This file was generated by make $(AUTOCONF_H). DO NOT EDIT THIS FILE. Please edit $(CONFIG) instead */" >> $(AUTOCONF_H)
	@echo "#ifndef __AUTOCONF_H" >> $(AUTOCONF_H)
	@echo "#define __AUTOCONF_H" >> $(AUTOCONF_H)
	@echo "" >> $(AUTOCONF_H)
	@echo "#define __CONFIG_ARCH \"$(ARCH)\"" >> $(AUTOCONF_H)
	@echo "#define __CONFIG_SRCARCH \"$(SRCARCH)\"" >> $(AUTOCONF_H)
	@echo "#define __CONFIG_CPU \"$(CONFIG_CPU)\"" >> $(AUTOCONF_H)
	@echo "" >> $(AUTOCONF_H)
	@awk '$$1 == "option" { print "#define __CONFIG_" $$2 " " $$3 }' $(CONFIG) >> $(AUTOCONF_H)
	@echo "" >> $(AUTOCONF_H)
	@echo "#endif /* __AUTOCONF_H */" >> $(AUTOCONF_H)

.version.c: $(CONFIG)
	@echo " GEN     .version.c"
	@rm -f .version.c
	@echo "/* This file was generated by make .version.c. DO NOT EDIT THIS FILE. Please edit $(CONFIG) instead */" >> .version.c
	@echo "char __release[] = \"$(V_MAJOR).$(V_MINOR)-$(V_RELEASE)\";" >> .version.c
	@echo "char __osname[] = \"IdyllaOS\";" >> .version.c
	@echo "char __machine[] = \"$(CONFIG_CPU)\";" >> .version.c
	@echo "char __config_name[] = \"$(CONFIG_NAME)\";" >> .version.c
	@echo "char __version[] = \"$(CONFIG_NAME) $(shell LANG=C date)\";" >> .version.c

.symtab.c: .kernel.rel
	@echo " GEN     .symtab.c"
	@rm -f .symtab.c
	@echo "/* This file was generated by make symtab.c. DO NOT EDIT THIS FILE. */" >> .symtab.c
	@echo "#define __SYMTAB_C" >> .symtab.c
	@echo "#include <kernel/types.h>" >> .symtab.c
	@echo "#include <kernel/kld.h>" >> .symtab.c
	@echo "" >> .symtab.c
	@$(NM) .kernel.rel | awk '($$2 == "D") || ($$2 == "T") || ($$2 == "B") || ($$2 == "C") { print "extern char " $$3 ";" }' >> .symtab.c
	@echo "" >> .symtab.c
	@echo "struct kld_symbol __ksymtab[] = {" >> .symtab.c
	@$(NM) .kernel.rel | awk '($$2 == "D") || ($$2 == "T") || ($$2 == "B") || ($$2 == "C") { print "{ \"" $$3 "\", &" $$3 " },"  }' >> .symtab.c
	@echo "{ NULL, NULL }"  >> .symtab.c
	@echo "};" >> .symtab.c

.SUFFIXES: .S .c

.S.o:
ifdef MOD
	@echo " AS [M]  $@"
	@$(AS) $(ASFLAGS) $(MOD_ASFLAGS) $(KERNEL_INC) -c -o $@ $<
else
	@echo " AS      $@"
	@$(AS) $(ASFLAGS) $(KERNEL_INC) -c -o $@ $<
endif
.c.o:
ifdef MOD
	@echo " CC [M]  $@"
	@$(CC) $(CFLAGS) $(MOD_CFLAGS) $(KERNEL_INC) -c -o $@ $<
else
	@echo " CC      $@"
	@$(CC) $(CFLAGS) $(KERNEL_INC) -c -o $@ $<
endif
